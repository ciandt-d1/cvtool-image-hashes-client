# coding: utf-8

"""
    Kingpick ImageMatch API

    Image Perceptual Hash services. Search for images that look similar to each other.

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageHashSearchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all_orientations=True, url=None, distance_cutoff=4.5):
        """
        ImageHashSearchRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_orientations': 'bool',
            'url': 'str',
            'distance_cutoff': 'float'
        }

        self.attribute_map = {
            'all_orientations': 'all_orientations',
            'url': 'url',
            'distance_cutoff': 'distance_cutoff'
        }

        self._all_orientations = all_orientations
        self._url = url
        self._distance_cutoff = distance_cutoff

    @property
    def all_orientations(self):
        """
        Gets the all_orientations of this ImageHashSearchRequest.
        Whether or not to search for similar 90 degree rotations of the image.

        :return: The all_orientations of this ImageHashSearchRequest.
        :rtype: bool
        """
        return self._all_orientations

    @all_orientations.setter
    def all_orientations(self, all_orientations):
        """
        Sets the all_orientations of this ImageHashSearchRequest.
        Whether or not to search for similar 90 degree rotations of the image.

        :param all_orientations: The all_orientations of this ImageHashSearchRequest.
        :type: bool
        """

        self._all_orientations = all_orientations

    @property
    def url(self):
        """
        Gets the url of this ImageHashSearchRequest.
        The url of the image tha we will search for matches

        :return: The url of this ImageHashSearchRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ImageHashSearchRequest.
        The url of the image tha we will search for matches

        :param url: The url of this ImageHashSearchRequest.
        :type: str
        """

        self._url = url

    @property
    def distance_cutoff(self):
        """
        Gets the distance_cutoff of this ImageHashSearchRequest.
        Maximum image signature distance to be considered a match (default 0.45)

        :return: The distance_cutoff of this ImageHashSearchRequest.
        :rtype: float
        """
        return self._distance_cutoff

    @distance_cutoff.setter
    def distance_cutoff(self, distance_cutoff):
        """
        Sets the distance_cutoff of this ImageHashSearchRequest.
        Maximum image signature distance to be considered a match (default 0.45)

        :param distance_cutoff: The distance_cutoff of this ImageHashSearchRequest.
        :type: float
        """

        self._distance_cutoff = distance_cutoff

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageHashSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
